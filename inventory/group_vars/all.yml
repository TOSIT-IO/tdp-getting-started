---
# TDP
realm: REALM.TDP

# If you need HTTP proxy to reach internet
# http_proxy: "http://proxy:3128"
# https_proxy: "{{ http_proxy }}"
# no_proxy: ""

# Override default NTP servers
# ntp_servers: []

ldap_groups:
  - group: tdp_user
    gid: 1101
  - group: smoke_user
    gid: 1102

ldap_users:
  - user: tdp_user
    password: tdp_user123
    uid: 1101
    gid: 1101
  - user: smoke_user
    password: smoke_user123
    uid: 1102
    gid: 1102

# Kerberos
kadmin_principal: admin/admin
kadmin_password: admin123
kadmind_server: "{{ groups['kdc'][0] | tosit.tdp.access_fqdn(hostvars) }}"
kdc_server: "{{ groups['kdc'][0] | tosit.tdp.access_fqdn(hostvars) }} "

ca_name: "tdp_ca"
ca_file: "{{ certs_dir }}/tdp_ca.crt"

# Service start on boot
hdfs_nn_start_on_boot: yes
hdfs_dn_start_on_boot: yes
hdfs_jn_start_on_boot: yes
hdfs_zkfc_start_on_boot: yes
yarn_nm_start_on_boot: yes
yarn_rm_start_on_boot: yes
yarn_ts_start_on_boot: yes
hbase_master_start_on_boot: yes
hbase_rs_start_on_boot: yes
hiveserver2_start_on_boot: yes
knox_start_on_boot: yes
oozie_start_on_boot: yes
ranger_admin_start_on_boot: yes
ranger_usync_start_on_boot: yes
spark_hs_start_on_boot: yes
spark3_hs_start_on_boot: yes
zk_start_on_boot: yes
krb_start_on_boot: yes
livy_start_on_boot: yes
livy_spark3_start_on_boot: yes
kafka_start_on_boot: yes

# Service restart policies
hdfs_nn_restart: always
hdfs_dn_restart: always
hdfs_jn_restart: always
hdfs_zkfc_restart: always
yarn_nm_restart: always
yarn_rm_restart: always
yarn_ts_restart: always
hbase_master_restart: always
hbase_rs_restart: always
hiveserver2_restart: always
knox_restart: always
oozie_restart: always
ranger_admin_restart: always
ranger_usync_restart: always
spark_hs_restart: always
zk_restart: always

ranger_admin_password: RangerAdmin123
POLICY_MGR_URL: "https://{{ groups['ranger_admin'][0] | tosit.tdp.access_fqdn(hostvars) }}:6182"

# Hadoop
core_site:
  hadoop.security.auth_to_local: |
    RULE:[2:$1/$2@$0]([ndj]n/.*@{{ realm }})s/.*/hdfs/
    RULE:[2:$1/$2@$0]([rn]m/.*@{{ realm }})s/.*/yarn/
    RULE:[2:$1/$2@$0](jhs/.*@{{ realm }})s/.*/mapred/
    RULE:[2:$1/$2@$0](hive/.*@{{ realm }})s/.*/hive/
    RULE:[2:$1/$2@$0](livy/.*@{{ realm }})s/.*/livy/
    RULE:[1:$1@$0]({{ hdfs_headless_principal }}@{{ realm }})s/.*/hdfs/
    RULE:[1:$1@$0]({{ yarn_headless_principal }}@{{ realm }})s/.*/yarn/
    RULE:[1:$1@$0]({{ mapred_headless_principal }}@{{ realm }})s/.*/mapred/
    RULE:[1:$1@$0]({{ hive_headless_principal }}@{{ realm }})s/.*/hive/
    RULE:[1:$1@$0]({{ zookeeper_headless_principal }}@{{ realm }})s/.*/zookeeper/
    RULE:[1:$1@$0]({{ hbase_headless_principal }}@{{ realm }})s/.*/hbase/
    RULE:[1:$1@$0]({{ spark_headless_principal }}@{{ realm }})s/.*/spark/
    DEFAULT
  hadoop.proxyuser.livy.hosts: "*"
  hadoop.proxyuser.livy.groups: "*"

# Spark
spark_defaults:
  spark.eventLog.dir: hdfs://mycluster/spark-logs
  spark.history.fs.logDirectory: hdfs://mycluster/spark-logs
  spark-yarn-historyServer: "{{ groups['kdc'][0] | tosit.tdp.access_fqdn(hostvars) }}:18081"

# User management (users created in deploy-users.yml)
users:
  - user: tdp_user
    password: tdp_user123
    group: tdp_user
    uid: 1101
    gid: 1101
  - user: smoke_user
    password: smoke_user123
    group: smoke_user
    uid: 1102
    gid: 1102

# Depends on hdfs service
user_hdfs_policies:
  - name: tdp_user - path
    description: tdp_user access to /user/tdp_user
    service: hdfs-tdp
    isAuditEnabled: true
    isEnabled: true
    resources:
      path:
        isExcludes: false
        isRecursive: true
        values: ["/user/tdp_user"]
    policyItems:
      - accesses:
          - { isAllowed: true, type: read }
          - { isAllowed: true, type: write }
          - { isAllowed: true, type: execute }
        conditions: []
        delegateAdmin: true
        groups: []
        users: [tdp_user]
    repositoryType: hdfs
  - name: smoke_user - path
    description: smoke_user access to /user/smoke_user
    service: hdfs-tdp
    isAuditEnabled: true
    isEnabled: true
    resources:
      path:
        isExcludes: false
        isRecursive: true
        values: ["/user/smoke_user"]
    policyItems:
      - accesses:
          - { isAllowed: true, type: read }
          - { isAllowed: true, type: write }
          - { isAllowed: true, type: execute }
        conditions: []
        delegateAdmin: true
        groups: []
        users: [smoke_user]
    repositoryType: hdfs

# Depends on hive service
user_hive_policies:
  - name: tdp_user - database
    description: tdp_user access to tdp_user database
    service: hive-tdp
    repositoryType: hive
    isAuditEnabled: true
    isEnabled: true
    resources:
      column:
        isExcludes: false
        values: ["*"]
      database:
        isExcludes: false
        values: [tdp_user]
      table:
        isExcludes: false
        values: ["*"]
    policyItems:
      - users: [tdp_user]
        groups: []
        delegateAdmin: true
        accesses:
          - { isAllowed: true, type: select }
          - { isAllowed: true, type: update }
          - { isAllowed: true, type: create }
          - { isAllowed: true, type: drop }
          - { isAllowed: true, type: alter }
          - { isAllowed: true, type: index }
          - { isAllowed: true, type: lock }
          - { isAllowed: true, type: all }
          - { isAllowed: true, type: read }
          - { isAllowed: true, type: write }
          - { isAllowed: true, type: refresh }
        conditions: []

# Depends on hbase service
user_hbase_policies:
  - name: tdp_user - table
    description: tdp_user access to tdp_user_* tables
    service: hbase-tdp
    repositoryType: hbase
    isAuditEnabled: true
    isEnabled: true
    resources:
      column:
        isExcludes: false
        values: ["*"]
      column-family:
        isExcludes: false
        values: ["*"]
      table:
        isExcludes: false
        values: ["default:tdp_user_*"]
    policyItems:
      - users: [tdp_user]
        groups: []
        delegateAdmin: true
        accesses:
          - { isAllowed: true, type: read }
          - { isAllowed: true, type: write }
          - { isAllowed: true, type: create }
        conditions: []

user_kafka_policies:
  - name: tdp_user - topic
    description: test_user access to tdp-user-* topics
    service: kafka-tdp
    repositoryType: kafka
    isAuditEnabled: true
    isEnabled: true
    resources:
      topic:
        isExcludes: false
        values: ["tdp-user-*"]
    policyItems:
      - users: [tdp_user]
        groups: []
        delegateAdmin: true
        accesses:
          - { isAllowed: true, type: create }
          - { isAllowed: true, type: publish }
          - { isAllowed: true, type: consume }
          - { isAllowed: true, type: configure }
          - { isAllowed: true, type: describe }
          - { isAllowed: true, type: delete }
          - { isAllowed: true, type: describe_configs }
          - { isAllowed: true, type: alter_configs }
        conditions: []
